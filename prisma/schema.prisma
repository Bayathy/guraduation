generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  Authenticator Authenticator[]
  Chat          Chat[]
  sessions      Session[]
  Issue         Issue[]
  UserTestType  UserTestType[]
}

model Account {
  userId            String
  providerAccountId String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  access_token      String?
  expires_at        Int?
  id_token          String?
  provider          String
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  type              String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Message {
  id        String   @id @default(uuid())
  role      String
  content   String
  createdAt DateTime @default(now())

  chatId String
  Chat   Chat?  @relation(fields: [chatId], references: [id], onDelete: Cascade)

  MessageIssue MessageIssue[]
}

model Chat {
  id        String    @id
  createdAt DateTime  @default(now())
  userId    String
  name      String    @default("New Chat")
  isDeleted Boolean   @default(false)
  User      User      @relation(fields: [userId], references: [id])
  messages  Message[]

  Issue Issue[]
}

model MessageIssue {
  messageId String
  issueId   String

  Message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  Issue   Issue   @relation(fields: [issueId], references: [id], onDelete: Cascade)

  @@id([messageId, issueId])
}

model Issue {
  id        String   @id @default(uuid())
  userId    String
  chatId    String
  createdAt DateTime @default(now())
  category  String[]
  reason    String

  Chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  MessageIssue MessageIssue[]
}

model UserTestType {
  id       String @id @default(uuid())
  userId   String
  testType String
  User     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
